#!/usr/bin/env python
# (c) Copyright 2017 Jonathan Simmonds
#
# Licensed under the MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
"""A micro installer, designed to be lightly configurable and very simple.
   Useful for installing small, very simple projects."""
import argparse
import ConfigParser
import textwrap
import sys
import os

SUPPORTED_NAMES = ['INSTALL.CFG', 'install.cfg', '.INSTALL.CFG', '.install.cfg']
PROJECT_SECTION = '$PROJECT$'
NAME_KEY = 'name'
DESC_KEY = 'description'
ROOT_KEY = 'root'
SOURCE_KEY = 'source'
TARGET_KEY = 'target'
OPTIONAL_MODULE_KEY = 'optional_module'
DEFAULT_MODULE_KEY = 'default_module'
OVERRIDE_TARGET_KEY = 'override_target'
OVERRIDE_ROOT_KEY = 'override_root'
DEFAULTS = {
    SOURCE_KEY: '',
    TARGET_KEY: '%(' + ROOT_KEY + ')s/%(' + SOURCE_KEY + ')s',
    OPTIONAL_MODULE_KEY: 'no',
    DEFAULT_MODULE_KEY: 'yes',
    OVERRIDE_TARGET_KEY: 'no',
    OVERRIDE_ROOT_KEY: 'no',
    DESC_KEY: '',
}
YES_VALUES = ['y', 'Y', 'yes', 'Yes']

def process_project(config, interactive=True):
    name = config.get(PROJECT_SECTION, NAME_KEY)
    desc = config.get(PROJECT_SECTION, DESC_KEY)
    print '\nInstaller for %s\n%s\n' % (name, '-' * (14 + len(name)))
    print '%s\n' % (textwrap.fill(desc))
    if config.has_option(PROJECT_SECTION, ROOT_KEY):
        root = config.get(PROJECT_SECTION, ROOT_KEY)
        override_root = config.get(PROJECT_SECTION, OVERRIDE_ROOT_KEY)
        if interactive and override_root:
            user = raw_input('Installation directory [default: %s]: ' % (root))
            if user:
                config.set(PROJECT_SECTION, ROOT_KEY, user)
        print 'Installing to %s\n' % (root)
    overrides = {}
    for (key, value) in config.items(PROJECT_SECTION):
        if key not in DEFAULTS and key != NAME_KEY:
            overrides[key] = value
    return overrides

def process_module(config, section, overrides=None, interactive=True):
    # Extract fields from the section.
    if not config.has_option(section, NAME_KEY, vars=overrides):
        config.set(section, NAME_KEY, vars=overrides)
    name = config.get(section, NAME_KEY, vars=overrides)
    source = config.get(section, SOURCE_KEY, vars=overrides)
    target = config.get(section, TARGET_KEY, vars=overrides)
    optional = config.get(section, OPTIONAL_MODULE_KEY, vars=overrides)
    default = config.get(section, DEFAULT_MODULE_KEY, vars=overrides)
    override_target = config.get(section, OVERRIDE_TARGET_KEY, vars=overrides)
    # Collect user input if necessary.
    if interactive and optional:
        user = raw_input('Install %s [%s]: ' % (name, 'Y/n' if default else 'N/y'))
        if (user and user not in YES_VALUES) or (not user and not default):
            return
    else:
        print "Installing %s..." % (name)
    if interactive and override_target:
        user = raw_input('  Install directory [default: %s]: ' % (target))
        if user:
            config.set(name, TARGET_KEY, user)
            target = config.get(name, TARGET_KEY, vars=overrides)
    #if os.path.exists(target):
    print '  Installed from %s to %s' % (source, target)

def main():
    """Main method."""
    # Handle command line.
    parser = argparse.ArgumentParser(description='A micro installer, designed '
                                     'to be lightly configurable and very '
                                     'simple. Useful for installing small, '
                                     'very simple projects.')
    parser.add_argument('project_dir',
                        type=str, metavar='PROJECT-DIR', nargs='?', default='.',
                        help="project directory to install from; defaults to '.'")
    parser.add_argument('-y', '--yes',
                        dest='interactive', action='store_false', default=True,
                        help='run non-interactively, using all default arguments')
    parser.add_argument('-l', '--links',
                        action='store_true', default=False,
                        help='create symbolic links instead of copying files')
    parser.add_argument('-u', '--uninstall',
                        action='store_true', default=False,
                        help='uninstall an existing project installation')
    args = parser.parse_args()

    # Parse the config file.
    config = ConfigParser.SafeConfigParser(DEFAULTS)
    config.read([os.path.join(args.project_dir, n) for n in SUPPORTED_NAMES])

    # Remove the project information.
    overrides = process_project(config, args.interactive)
    # Loop through the parsed file and install each module.
    for module in config.sections():
        if module != PROJECT_SECTION:
            process_module(config, module, overrides, args.interactive)

# Entry point.
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print
        print "Installation cancelled."
        sys.exit(1)
