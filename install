#!/usr/bin/env python
# (c) Copyright 2017 Jonathan Simmonds
#
# Licensed under the MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
"""
A micro installer, intended to be very small, light weight and configurable.
Designed for the installation of small, simple projects.

Maintained at https://github.com/jonsim/tiny-install
"""
import argparse     # ArgumentParser
import ConfigParser # SafeConfigParser
import sys          # exit
import shutil       # copy2, copytree, rmtree
import os           # os.path.join, os.path.exists, os.path.dirname, os.listdir
                    # os.path.abspath, os.makedirs, os.symlink, os.remove,
import tempfile     # mkdtemp

SUPPORTED_NAMES = ['INSTALL.CFG', 'install.cfg', '.INSTALL.CFG', '.install.cfg']
PROJECT_SECTION = '$PROJECT$'
NAME_KEY = 'name'
DESC_KEY = 'description'
ROOT_KEY = 'root'
SOURCE_KEY = 'source'
TARGET_KEY = 'target'
OPTIONAL_MODULE_KEY = 'optional_module'
DEFAULT_MODULE_KEY = 'default_module'
OVERRIDE_TARGET_KEY = 'override_target'
OVERRIDE_ROOT_KEY = 'override_root'
DEFAULTS = {
    SOURCE_KEY: '%(' + NAME_KEY + ')s',
    TARGET_KEY: '%(' + ROOT_KEY + ')s/%(' + SOURCE_KEY + ')s',
    OPTIONAL_MODULE_KEY: 'no',
    DEFAULT_MODULE_KEY: 'yes',
    OVERRIDE_TARGET_KEY: 'no',
    OVERRIDE_ROOT_KEY: 'no',
    DESC_KEY: '',
}
YES_VALUES = ['y', 'Y', 'yes', 'Yes']
_TEMPDIR = None

class ConfigError(RuntimeError):
    """Exception caused by the config file being missing or invalid."""
    pass

def process_project(config, interactive=True):
    """Processes the $PROJECT$ section from a config and prints project info.

    Args:
        config:         SafeConfigParser containing installation configuration.
        interactive:    boolean, True if questions should be asked with answers
            expected on stdin to retrieve any potential overrides.

    Returns:
        string: project name
        dict of string to strings: mapping of keys values for all override
            information exported from the $PROJECT$ section.
    """
    import textwrap # fill
    name = config.get(PROJECT_SECTION, NAME_KEY)
    desc = config.get(PROJECT_SECTION, DESC_KEY)
    header = '%s installer' % (name)
    print '\n%s\n%s\n' % (header, '-' * len(header))
    print '%s\n' % (textwrap.fill(desc))
    if config.has_option(PROJECT_SECTION, ROOT_KEY):
        root = config.get(PROJECT_SECTION, ROOT_KEY)
        override_root = config.getboolean(PROJECT_SECTION, OVERRIDE_ROOT_KEY)
        if interactive and override_root:
            user = raw_input('Installation directory [default: %s]: ' % (root))
            if user:
                config.set(PROJECT_SECTION, ROOT_KEY, user)
        print 'Installing to %s\n' % (root)
    overrides = {}
    for (key, value) in config.items(PROJECT_SECTION):
        if key not in DEFAULTS and key != NAME_KEY:
            overrides[key] = value
    return name, overrides

def process_module(project_dir, config, section, overrides=None, symlink=False,
                   interactive=True):
    """Processes a module section from a config and installs it.

    Args:
        project_dir:    string path of the location of the config file.
        config:         SafeConfigParser containing installation configuration.
        section:        string name of the module's section in the config.
        overrides:      dict of string keys to string values for all override
            information exported from the $PROJECT$ section.
        symlink:        boolean, True if symlinks should be generated at the
            target location instead of copying there.
        interactive:    boolean, True if questions should be asked with answers
            expected on stdin to retrieve any potential overrides.
    """
    # Extract fields from the section (and write-back any missing).
    if not config.has_option(section, NAME_KEY):
        config.set(section, NAME_KEY, section)
    name = config.get(section, NAME_KEY, vars=overrides)
    source = config.get(section, SOURCE_KEY, vars=overrides)
    target = config.get(section, TARGET_KEY, vars=overrides)
    optional = config.getboolean(section, OPTIONAL_MODULE_KEY)
    default = config.getboolean(section, DEFAULT_MODULE_KEY)
    override_target = config.getboolean(section, OVERRIDE_TARGET_KEY)
    # Collect user input if necessary.
    if interactive and optional:
        user = raw_input('Install %s [%s]? ' % (name, 'Y/n' if default else 'N/y'))
        if (user and user not in YES_VALUES) or (not user and not default):
            print '  Skipped'
            return
    else:
        print "Installing %s..." % (name)
    if interactive and override_target:
        user = raw_input('  Install directory [default: %s]: ' % (target))
        if user:
            config.set(name, TARGET_KEY, user)
            target = config.get(name, TARGET_KEY, vars=overrides)
    # Actually install the module.
    source = os.path.expanduser(os.path.join(project_dir, source))
    target = os.path.expanduser(target)
    # Check source exists.
    if not os.path.exists(source):
        raise ConfigError('Source file %s does not exist' % (source))
    # Check target directory exists and make it if necessary.
    target_dir = os.path.dirname(target)
    if not os.path.exists(target_dir):
        os.makedirs(target_dir)
    # Check the target itself does not exist and remove it if it does.
    if os.path.exists(target):
        if os.path.isfile(target):
            os.remove(target)
        else:
            if interactive:
                user = raw_input('  WARNING: %s exists. Replace [Y/n]? ' % (target))
                if user and user not in YES_VALUES:
                    print '  Skipped'
                    return
            shutil.rmtree(target)
    # Install the file
    if symlink:
        os.symlink(os.path.abspath(source), target)
    else:
        # Copy the file
        if os.path.isfile(source):
            shutil.copy2(source, target)
        else:
            shutil.copytree(source, target)
    print '  Installed'

def get_config_from_local_dir(dir_path, err_loc=None):
    """Retrieves a path to the config file from a local directory.

    Args:
        dir_path:   string path to a directory.
        err_loc:    the location to report if an error occurs. May be None
            (default) to report dir_path.

    Returns:
        string path to the local config file.

    Raises:
        ConfigError:    if a config file could not be found in the directory.
    """
    for candidate in [os.path.join(dir_path, n) for n in SUPPORTED_NAMES]:
        if os.path.isfile(candidate):
            return candidate
    raise ConfigError('%s does not contain any installation config files.'
                      % (err_loc if err_loc else dir_path))

def get_config_from_local_zip(zip_path):
    """Retrieves a path to the config file from a local zip file.

    Args:
        zip_path:   string path to a zip file.

    Returns:
        string path to the local config file.

    Raises:
        ConfigError:    if a config file could not be extracted from the zip.
    """
    import zipfile      # ZipFile
    global _TEMPDIR
    with zipfile.ZipFile(zip_path, 'r') as project_zip:
        root_dir = _TEMPDIR = tempfile.mkdtemp()
        project_zip.extractall(root_dir)
        # Use the root extracted tree unless it contains just a single
        # directory, in which case use that.
        extracted_files = [os.path.join(root_dir, f) for f in os.listdir(root_dir)]
        if len(extracted_files) == 1 and os.path.isdir(extracted_files[0]):
            root_dir = extracted_files[0]
        return get_config_from_local_dir(root_dir, zip_path)

def get_config_from_remote_zip(zip_url):
    """Retrieves a path to the config file from an URL to a remote zip file.

    Args:
        zip_url:    string url to a zip file.

    Returns:
        string path to the local config file.

    Raises:
        ConfigError:    if a config file could not be retrieved from the URL.
    """
    raise ConfigError('%s is an URL to a zip file but this functionality is '
                      'currently unsupported' % (zip_url))

def get_config_from_remote_git(git_url):
    """Retrieves a path to the config file from an URL to a git repository.

    Args:
        git_url:    string url to a git repository.

    Returns:
        string path to the local config file.

    Raises:
        ConfigError:    if a config file could not be retrieved from the URL.
    """
    raise ConfigError('%s is an URL to a git repo but this functionality is '
                      'currently unsupported' % (git_url))

def get_config(location):
    """Retrieves a path to the config file from any of the supported locations.

    Args:
        location:   string location description. This may be a local directory,
            a local zip file, an URL to a zip file or an URL to a git repo.

    Returns:
        string path to the local config file.

    Raises:
        ConfigError:    if the location description given could not be used to
            locate an installation config file.
    """
    import urlparse     # urlparse
    if urlparse.urlparse(location).scheme:
        if location.endswith('.git'):
            return get_config_from_remote_git(location)
        elif location.endswith('.zip'):
            return get_config_from_remote_zip(location)
        else:
            raise ConfigError('%s is not a valid URL to a git repository or '
                              'zip file.' % (location))
    else:
        if not os.path.exists(location):
            raise ConfigError('%s does not exist locally.' % (location))
        elif os.path.isfile(location):
            return get_config_from_local_zip(location)
        elif os.path.isdir(location):
            return get_config_from_local_dir(location)
        else:
            raise ConfigError('%s is not a directory.' % (location))

def main():
    """Main method."""
    # Handle command line.
    parser = argparse.ArgumentParser(description='A micro installer, designed '
                                     'to be lightly configurable and very '
                                     'simple. Useful for installing small, '
                                     'very simple projects.')
    parser.add_argument('project_loc',
                        type=str, metavar='PROJECT-LOC', nargs='?',
                        default=sys.path[0],
                        help='location of the project to install. This may be a '
                        'directory, a zip file, an URL to a zip file or an URL '
                        'to a git repository. Defaults to this script\'s '
                        'directory (%(default)s).')
    parser.add_argument('-y', '--yes',
                        dest='interactive', action='store_false', default=True,
                        help='run non-interactively, using all default arguments')
    parser.add_argument('-l', '--links',
                        action='store_true', default=False,
                        help='create symbolic links instead of copying files')
    args = parser.parse_args()
    try:
        # Find the config file.
        config_path = get_config(args.project_loc)

        # Parse the config file.
        config = ConfigParser.SafeConfigParser(DEFAULTS)
        with open(config_path) as config_file:
            config.readfp(config_file)

        # Remove the project information.
        name, overrides = process_project(config, args.interactive)
        # Loop through the parsed file and install each module.
        for module in config.sections():
            if module != PROJECT_SECTION:
                process_module(args.project_dir, config, module, overrides,
                               symlink=args.links, interactive=args.interactive)
        print '\n%s installed' % (name)
    except KeyboardInterrupt:
        print "\nInstallation cancelled."
        sys.exit(1)
    finally:
        if _TEMPDIR:
            shutil.rmtree(_TEMPDIR)

# Entry point.
if __name__ == "__main__":
    main()
